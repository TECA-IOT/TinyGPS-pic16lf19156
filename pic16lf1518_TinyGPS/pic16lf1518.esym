C G "" 0 124 25 "*"
D G "__PCM__" 0 170 ""5.093""
D G "__DEVICE__" 0 170 "1518"
D G "__DATE__" 0 170 ""22-Feb-21""
D G "__TIME__" 0 170 ""14:26:20""
D G "_UNICODE" 0 170 ""?""
D G "__EVAL" 0 170 ""?"" "Standard Header file for the PIC16LF1518 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 39 ""
v L "value" 2 39 "int8" `55 
f B "set_tris_a" 2 39 "void(int8 value)" `54 
f N "set_tris_b" 2 40 ""
v L "value" 2 40 "int8" `57 
f B "set_tris_b" 2 40 "void(int8 value)" `56 
f N "set_tris_c" 2 41 ""
v L "value" 2 41 "int8" `59 
f B "set_tris_c" 2 41 "void(int8 value)" `58 
f N "set_tris_e" 2 42 ""
v L "value" 2 42 "int8" `61 
f B "set_tris_e" 2 42 "void(int8 value)" `60 
f N "get_tris_a" 2 43 ""
f B "get_tris_a" 2 43 "int8()" `62 
f N "get_tris_b" 2 44 ""
f B "get_tris_b" 2 44 "int8()" `63 
f N "get_tris_c" 2 45 ""
f B "get_tris_c" 2 45 "int8()" `64 
f N "get_tris_e" 2 46 ""
f B "get_tris_e" 2 46 "int8()" `65 
f N "output_a" 2 47 ""
v L "value" 2 47 "int8" `67 
f B "output_a" 2 47 "void(int8 value)" `66 
f N "output_b" 2 48 ""
v L "value" 2 48 "int8" `69 
f B "output_b" 2 48 "void(int8 value)" `68 
f N "output_c" 2 49 ""
v L "value" 2 49 "int8" `71 
f B "output_c" 2 49 "void(int8 value)" `70 
f N "output_e" 2 50 ""
v L "value" 2 50 "int8" `73 
f B "output_e" 2 50 "void(int8 value)" `72 
f N "input_a" 2 51 ""
f B "input_a" 2 51 "int8()" `74 
f N "input_b" 2 52 ""
f B "input_b" 2 52 "int8()" `75 
f N "input_c" 2 53 ""
f B "input_c" 2 53 "int8()" `76 
f N "input_e" 2 54 ""
f B "input_e" 2 54 "int8()" `77 
f N "input_change_a" 2 55 ""
f B "input_change_a" 2 55 "int8()" `78 
f N "input_change_b" 2 56 ""
f B "input_change_b" 2 56 "int8()" `79 
f N "input_change_c" 2 57 ""
f B "input_change_c" 2 57 "int8()" `80 
f N "input_change_e" 2 58 ""
f B "input_change_e" 2 58 "int8()" `81 
f N "port_b_pullups" 2 59 ""
v L "upmask" 2 59 "int8" `83 
f B "port_b_pullups" 2 59 "void(int8 upmask)" `82 
f N "port_e_pullups" 2 60 ""
v L "upmask" 2 60 "int8" `85 
f B "port_e_pullups" 2 60 "void(int8 upmask)" `84 
f N "input" 2 61 ""
v L "pin" 2 61 "int16" `87 
f B "input" 2 61 "int8(int16 pin)" `86 
f N "input_state" 2 62 ""
v L "pin" 2 62 "int16" `89 
f B "input_state" 2 62 "int8(int16 pin)" `88 
f N "output_low" 2 63 ""
v L "pin" 2 63 "int16" `91 
f B "output_low" 2 63 "void(int16 pin)" `90 
f N "output_high" 2 64 ""
v L "pin" 2 64 "int16" `93 
f B "output_high" 2 64 "void(int16 pin)" `92 
f N "output_toggle" 2 65 ""
v L "pin" 2 65 "int16" `95 
f B "output_toggle" 2 65 "void(int16 pin)" `94 
f N "output_bit" 2 66 ""
v L "pin" 2 66 "int16" `97 
v L "level" 2 66 "int8" `98 
f B "output_bit" 2 66 "void(int16 pin,int8 level)" `96 
f N "output_float" 2 67 ""
v L "pin" 2 67 "int16" `100 
f B "output_float" 2 67 "void(int16 pin)" `99 
f N "output_drive" 2 68 ""
v L "pin" 2 68 "int16" `102 
f B "output_drive" 2 68 "void(int16 pin)" `101  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 72 "96"
d G "PIN_A1" 2 73 "97"
d G "PIN_A2" 2 74 "98"
d G "PIN_A3" 2 75 "99"
d G "PIN_A4" 2 76 "100"
d G "PIN_A5" 2 77 "101"
d G "PIN_A6" 2 78 "102"
d G "PIN_A7" 2 79 "103"
d G "PIN_B0" 2 81 "104"
d G "PIN_B1" 2 82 "105"
d G "PIN_B2" 2 83 "106"
d G "PIN_B3" 2 84 "107"
d G "PIN_B4" 2 85 "108"
d G "PIN_B5" 2 86 "109"
d G "PIN_B6" 2 87 "110"
d G "PIN_B7" 2 88 "111"
d G "PIN_C0" 2 90 "112"
d G "PIN_C1" 2 91 "113"
d G "PIN_C2" 2 92 "114"
d G "PIN_C3" 2 93 "115"
d G "PIN_C4" 2 94 "116"
d G "PIN_C5" 2 95 "117"
d G "PIN_C6" 2 96 "118"
d G "PIN_C7" 2 97 "119"
d G "PIN_E3" 2 99 "131"
d G "FALSE" 2 102 "0"
d G "TRUE" 2 103 "1"
d G "BYTE" 2 105 "int8"
d G "BOOLEAN" 2 106 "int1"
d G "getc" 2 108 "getch"
d G "fgetc" 2 109 "getch"
d G "getchar" 2 110 "getch"
d G "putc" 2 111 "putchar"
d G "fputc" 2 112 "putchar"
d G "fgets" 2 113 "gets"
d G "fputs" 2 114 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 119 ""
f B "restart_cause" 2 119 "int8()" `103 
f N "reset_cpu" 2 120 ""
f B "reset_cpu" 2 120 "void()" `104 
f N "sleep" 2 121 ""
f B "sleep" 2 121 "void()" `105  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 2 123 "0x3C"
d G "MCLR_FROM_POWER_UP" 2 124 "0x34"
d G "BROWNOUT_RESTART" 2 125 "0x3E"
d G "MCLR_FROM_SLEEP" 2 126 "0x27"
d G "WDT_TIMEOUT" 2 127 "0x1F"
d G "WDT_FROM_SLEEP" 2 128 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 2 129 "0x2F"
d G "MCLR_FROM_RUN" 2 130 "0x37"
d G "RESET_INSTRUCTION" 2 131 "0x3B"
d G "STACK_OVERFLOW" 2 132 "0xBF"
d G "STACK_UNDERFLOW" 2 133 "0x7F"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 140 ""
v L "mode" 2 140 "int8" `107 
f B "setup_timer_0" 2 140 "void(int8 mode)" `106 
f N "set_timer0" 2 141 ""
v L "value" 2 141 "int8" `109 
f B "set_timer0" 2 141 "void(int8 value)" `108 
f N "get_timer0" 2 142 ""
f B "get_timer0" 2 142 "int8()" `110 
f N "setup_counters" 2 143 ""
v L "mode" 2 143 "int8" `112 
v L "prescaler" 2 143 "int8" `113 
f B "setup_counters" 2 143 "void(int8 mode,int8 prescaler)" `111 
f N "set_rtcc" 2 144 ""
v L "value" 2 144 "int8" `115 
f B "set_rtcc" 2 144 "void(int8 value)" `114 
f N "get_rtcc" 2 145 ""
f B "get_rtcc" 2 145 "int8()" `116  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 147 "0"
d G "T0_EXT_L_TO_H" 2 148 "32"
d G "T0_EXT_H_TO_L" 2 149 "48"
d G "T0_DIV_1" 2 151 "8"
d G "T0_DIV_2" 2 152 "0"
d G "T0_DIV_4" 2 153 "1"
d G "T0_DIV_8" 2 154 "2"
d G "T0_DIV_16" 2 155 "3"
d G "T0_DIV_32" 2 156 "4"
d G "T0_DIV_64" 2 157 "5"
d G "T0_DIV_128" 2 158 "6"
d G "T0_DIV_256" 2 159 "7"
d G "T0_8_BIT" 2 162 "0"
d G "RTCC_INTERNAL" 2 166 "0"
d G "RTCC_EXT_L_TO_H" 2 167 "32"
d G "RTCC_EXT_H_TO_L" 2 168 "48"
d G "RTCC_DIV_1" 2 169 "8"
d G "RTCC_DIV_2" 2 170 "0"
d G "RTCC_DIV_4" 2 171 "1"
d G "RTCC_DIV_8" 2 172 "2"
d G "RTCC_DIV_16" 2 173 "3"
d G "RTCC_DIV_32" 2 174 "4"
d G "RTCC_DIV_64" 2 175 "5"
d G "RTCC_DIV_128" 2 176 "6"
d G "RTCC_DIV_256" 2 177 "7"
d G "RTCC_8_BIT" 2 178 "0"
c L "get_rtcc" 2 3 7 "FUNCTION"
f N "setup_wdt" 2 188 ""
v L "mode" 2 188 "int16" `118 
f B "setup_wdt" 2 188 "void(int16 mode)" `117 
f N "restart_wdt" 2 189 ""
f B "restart_wdt" 2 189 "void()" `119  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 191 "0x1000"
d G "WDT_OFF" 2 192 "0x2000"
d G "WDT_1MS" 2 194 "0x100"
d G "WDT_2MS" 2 195 "0x101"
d G "WDT_4MS" 2 196 "0x102"
d G "WDT_8MS" 2 197 "0x103"
d G "WDT_16MS" 2 198 "0x104"
d G "WDT_32MS" 2 199 "0x105"
d G "WDT_64MS" 2 200 "0x106"
d G "WDT_128MS" 2 201 "0x107"
d G "WDT_256MS" 2 202 "0x108"
d G "WDT_512MS" 2 203 "0x109"
d G "WDT_1S" 2 204 "0x10A"
d G "WDT_2S" 2 205 "0x10B"
d G "WDT_4S" 2 206 "0x10C"
d G "WDT_8S" 2 207 "0x10D"
d G "WDT_16S" 2 208 "0x10E"
d G "WDT_32S" 2 209 "0x10F"
d G "WDT_64S" 2 210 "0x110"
d G "WDT_128S" 2 211 "0x111"
d G "WDT_256S" 2 212 "0x112"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 217 ""
v L "mode" 2 217 "int16" `121 
f B "setup_timer_1" 2 217 "void(int16 mode)" `120 
f N "get_timer1" 2 218 ""
f B "get_timer1" 2 218 "int16()" `122 
f N "set_timer1" 2 219 ""
v L "value" 2 219 "int16" `124 
f B "set_timer1" 2 219 "void(int16 value)" `123  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 222 "0"
d G "T1_INTERNAL" 2 223 "0x07"
d G "T1_EXTERNAL" 2 224 "0x87"
d G "T1_EXTERNAL_SYNC" 2 225 "0x83"
d G "T1_FOSC" 2 226 "0x47"
d G "T1_ENABLE_SOSC" 2 228 "0x08"
d G "T1_DIV_BY_1" 2 230 "0"
d G "T1_DIV_BY_2" 2 231 "0x10"
d G "T1_DIV_BY_4" 2 232 "0x20"
d G "T1_DIV_BY_8" 2 233 "0x30"
d G "T1_GATE" 2 235 "0x8000"
d G "T1_GATE_INVERTED" 2 236 "0xC000"
d G "T1_GATE_TOGGLE" 2 237 "0xA000"
d G "T1_GATE_SINGLE" 2 238 "0x9000"
d G "T1_GATE_TIMER2" 2 239 "0x8100"
d G "T1_GATE_COMP1" 2 240 "0x8200"
d G "T1_GATE_COMP2" 2 241 "0x8300"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 246 ""
v L "mode" 2 246 "int8" `126 
v L "period" 2 246 "int8" `127 
v L "postscale" 2 246 "int8" `128 
f B "setup_timer_2" 2 246 "void(int8 mode,int8 period,int8 postscale)" `125 
f N "get_timer2" 2 247 ""
f B "get_timer2" 2 247 "int8()" `129 
f N "set_timer2" 2 248 ""
v L "value" 2 248 "int8" `131 
f B "set_timer2" 2 248 "void(int8 value)" `130  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 250 "0"
d G "T2_DIV_BY_1" 2 251 "4"
d G "T2_DIV_BY_4" 2 252 "5"
d G "T2_DIV_BY_16" 2 253 "6"
d G "T2_DIV_BY_64" 2 254 "7"
c L "set_timer2" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 260 ""
v L "mode" 2 260 "int32" `133 
f B "setup_ccp1" 2 260 "void(int32 mode)" `132 
f N "setup_ccp1" 2 261 ""
v L "mode" 2 261 "int32" `135 
v L "pwm" 2 261 "int8" `136 
f B "setup_ccp1" 2 261 "void(int32 mode,int8 pwm)" `134 
f N "set_pwm1_duty" 2 262 ""
v L "value" 2 262 "int8" `138 
f B "set_pwm1_duty" 2 262 "void(int8 value)" `137 
f N "set_pwm1_duty" 2 263 ""
v L "value" 2 263 "int16" `140 
f B "set_pwm1_duty" 2 263 "void(int16 value)" `139  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 265 "0"
d G "CCP_CAPTURE_FE" 2 266 "0x04"
d G "CCP_CAPTURE_RE" 2 267 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 268 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 269 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 270 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 271 "0x09"
d G "CCP_COMPARE_INT" 2 272 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 2 273 "0x0B"
d G "CCP_PWM" 2 274 "0x0C"
d G "CCP_PWM_PLUS_1" 2 275 "0x1c"
d G "CCP_PWM_PLUS_2" 2 276 "0x2c"
d G "CCP_PWM_PLUS_3" 2 277 "0x3c"
d G "CCP2_C1" 2 283 "0x000"
d G "CCP2_B3" 2 284 "0x100"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 287 ""
v L "mode" 2 287 "int32" `145 
f B "setup_ccp2" 2 287 "void(int32 mode)" `144 
f N "setup_ccp2" 2 288 ""
v L "mode" 2 288 "int32" `147 
v L "pwm" 2 288 "int8" `148 
f B "setup_ccp2" 2 288 "void(int32 mode,int8 pwm)" `146 
f N "set_pwm2_duty" 2 289 ""
v L "value" 2 289 "int8" `150 
f B "set_pwm2_duty" 2 289 "void(int8 value)" `149 
f N "set_pwm2_duty" 2 290 ""
v L "value" 2 290 "int16" `152 
f B "set_pwm2_duty" 2 290 "void(int16 value)" `151 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 298 ""
v L "mode" 2 298 "int32" `157 
f B "setup_spi" 2 298 "void(int32 mode)" `156 
f N "spi_write" 2 299 ""
v L "value" 2 299 "int8" `159 
f B "spi_write" 2 299 "void(int8 value)" `158 
f N "spi_write" 2 300 ""
v L "wait" 2 300 "int8" `161 
v L "value" 2 300 "int8" `162 
f B "spi_write" 2 300 "void(int8 wait,int8 value)" `160 
f N "spi_read" 2 301 ""
f B "spi_read" 2 301 "int8()" `163 
f N "spi_read" 2 302 ""
v L "value" 2 302 "int8" `165 
f B "spi_read" 2 302 "int8(int8 value)" `164 
f N "spi_data_is_in" 2 303 ""
f B "spi_data_is_in" 2 303 "int8()" `166  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 305 "0x00"
d G "SPI_MASTER" 2 306 "0x20"
d G "SPI_SLAVE" 2 307 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 308 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 309 "0x00"
d G "SPI_CLK_DIV_4" 2 310 "0x00"
d G "SPI_CLK_DIV_16" 2 311 "0x01"
d G "SPI_CLK_DIV_64" 2 312 "0x02"
d G "SPI_CLK_T2" 2 313 "0x03"
d G "SPI_SS_DISABLED" 2 314 "0x01"
d G "SPI_SS_A5" 2 316 "0x000"
d G "SPI_SS_A0" 2 317 "0x10000"
d G "SPI_XMIT_L_TO_H" 2 319 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 320 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 322 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 323 "0x8000"
d G "SPI_L_TO_H" 2 326 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 327 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 2 3 2 "FUNCTION"
f N "setup_uart" 2 331 ""
v L "baud" 2 331 "int32" `168 
f B "setup_uart" 2 331 "void(int32 baud)" `167 
f N "setup_uart" 2 332 ""
v L "baud" 2 332 "int32" `170 
v L "stream" 2 332 "int8" `171 
f B "setup_uart" 2 332 "void(int32 baud,int8 stream)" `169 
f N "setup_uart" 2 333 ""
v L "baud" 2 333 "int32" `173 
v L "stream" 2 333 "int8" `174 
v L "clock" 2 333 "int32" `175 
f B "setup_uart" 2 333 "void(int32 baud,int8 stream,int32 clock)" `172 
f N "set_uart_speed" 2 334 ""
v L "baud" 2 334 "int32" `177 
f B "set_uart_speed" 2 334 "void(int32 baud)" `176 
f N "set_uart_speed" 2 335 ""
v L "baud" 2 335 "int32" `179 
v L "stream" 2 335 "int8" `180 
f B "set_uart_speed" 2 335 "void(int32 baud,int8 stream)" `178 
f N "set_uart_speed" 2 336 ""
v L "baud" 2 336 "int32" `182 
v L "stream" 2 336 "int8" `183 
v L "clock" 2 336 "int32" `184 
f B "set_uart_speed" 2 336 "void(int32 baud,int8 stream,int32 clock)" `181  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 340 "2"
d G "UART_DATA" 2 341 "4"
d G "UART_AUTODETECT" 2 342 "8"
d G "UART_AUTODETECT_NOWAIT" 2 343 "9"
d G "UART_WAKEUP_ON_RDA" 2 344 "10"
d G "UART_SEND_BREAK" 2 345 "13"
c L "set_uart_speed" 2 3 2 "FUNCTION"
f N "setup_vref" 2 349 ""
v L "mode" 2 349 "int8" `186 
f B "setup_vref" 2 349 "void(int8 mode)" `185  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 351 "0"
d G "VREF_1v024" 2 352 "0x81"
d G "VREF_2v048" 2 353 "0x82"
d G "VREF_4v096" 2 354 "0x83"
d G "TEMPERATURE_INDICATOR_DISABLED" 2 356 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 2 357 "0x20"
d G "TEMPERATURE_RANGE_LOW" 2 358 "0"
d G "TEMPERATURE_RANGE_HIGH" 2 359 "0x10"
c L "setup_vref" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 364 ""
v L "mode" 2 364 "int8" `188 
f B "setup_oscillator" 2 364 "void(int8 mode)" `187  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 367 "0"
d G "OSC_31250" 2 368 " (2*8)"
d G "OSC_62KHZ" 2 369 " (4*8)"
d G "OSC_125KHZ" 2 370 " (5*8)"
d G "OSC_250KHZ" 2 371 " (6*8)"
d G "OSC_500KHZ" 2 372 " (7*8)"
d G "OSC_1MHZ" 2 373 " (11*8)"
d G "OSC_2MHZ" 2 374 " (12*8)"
d G "OSC_4MHZ" 2 375 " (13*8)"
d G "OSC_8MHZ" 2 376 " (14*8)"
d G "OSC_16MHZ" 2 377 " (15*8)"
d G "OSC_SOSC" 2 379 "1"
d G "OSC_INTRC" 2 380 "2"
d G "OSC_NORMAL" 2 381 "0"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 388 ""
v L "mode" 2 388 "int16" `190 
f B "setup_adc" 2 388 "void(int16 mode)" `189 
f N "read_adc" 2 389 ""
f B "read_adc" 2 389 "int8()" `191 
f N "read_adc" 2 390 ""
v L "mode" 2 390 "int8" `193 
f B "read_adc" 2 390 "int8(int8 mode)" `192 
f N "read_adc" 2 391 ""
f G "read_adc" 2 391 "int16()" `194 
f N "read_adc" 2 392 ""
v L "mode" 2 392 "int8" `195 
f G "read_adc" 2 392 "int16(int8 mode,int32 pins)" `194 
f N "adc_done" 2 393 ""
f B "adc_done" 2 393 "int8(int8 mode,int32 pins)" `194  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 395 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 396 "0x100"
d G "ADC_CLOCK_DIV_4" 2 397 "0x40"
d G "ADC_CLOCK_DIV_8" 2 398 "0x10"
d G "ADC_CLOCK_DIV_32" 2 399 "0x20"
d G "ADC_CLOCK_DIV_16" 2 400 "0x50"
d G "ADC_CLOCK_DIV_64" 2 401 "0x60"
d G "ADC_CLOCK_INTERNAL" 2 402 "0x30" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 405 ""
v L "pins" 2 405 "int32" `196 
f B "setup_adc_ports" 2 405 "void(int32 pins)" `195 
f N "setup_adc_ports" 2 406 ""
v L "pins" 2 406 "int32" `198 
v L "reference" 2 406 "int32" `199 
f B "setup_adc_ports" 2 406 "void(int32 pins,int32 reference)" `197 
f N "set_analog_pins" 2 407 ""
v L "pin" 2 407 "int8" `201 
f B "set_analog_pins" 2 407 "void(int8 pin,*int8 _VA_LIST)" `200 
f N "setup_adc_reference" 2 408 ""
v L "reference" 2 408 "int32" `204 
f B "setup_adc_reference" 2 408 "void(int32 reference)" `203 
f N "set_adc_channel" 2 409 ""
v L "channel" 2 409 "int8" `206 
f B "set_adc_channel" 2 409 "void(int8 channel)" `205  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 413 "0x00800000" "| A0"
d G "sAN1" 2 414 "0x01000000" "| A1"
d G "sAN2" 2 415 "0x02000000" "| A2"
d G "sAN3" 2 416 "0x04000000" "| A3"
d G "sAN4" 2 417 "0x08000000" "| A5"
d G "sAN8" 2 418 "0x00010000" "| B2"
d G "sAN9" 2 419 "0x00020000" "| B3"
d G "sAN10" 2 420 "0x00008000" "| B1"
d G "sAN11" 2 421 "0x00040000" "| B4"
d G "sAN12" 2 422 "0x00004000" "| B0"
d G "sAN13" 2 423 "0x00080000" "| B5"
d G "sAN14" 2 424 "0x00000100" "| C2"
d G "sAN15" 2 425 "0x00000200" "| C3"
d G "sAN16" 2 426 "0x00000400" "| C4"
d G "sAN17" 2 427 "0x00000800" "| C5"
d G "sAN18" 2 428 "0x00001000" "| C6"
d G "sAN19" 2 429 "0x00002000" "| C7"
d G "NO_ANALOGS" 2 430 "0" "None"
d G "ALL_ANALOG" 2 431 "0x0F8FFF00" "A0 A1 A2 A3 A5 B2 B3 B1 B4 B0 B5 C2 C3 C4 C5 C6 C6"
d G "VSS_VDD" 2 434 "0x00000000" "| Range 0-Vdd"
d G "VSS_VREF" 2 435 "0x20000000" "| Range 0-VrefH"
d G "VSS_FVR" 2 436 "0x30000000" "| Range 0-Fvr"
d G "TEMPERATURE_INDICATOR" 2 440 "0x1E"
d G "FVR_CHANNEL" 2 441 "0x1F"
d G "ADC_START_AND_READ" 2 444 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 445 "1"
d G "ADC_READ_ONLY" 2 446 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 452 ""
v L "x" 2 452 "sint8" `208 
f B "abs" 2 452 "sint8(sint8 x)" `207 
f N "abs" 2 453 ""
v L "x" 2 453 "sint16" `210 
f B "abs" 2 453 "sint16(sint16 x)" `209 
f N "abs" 2 454 ""
v L "x" 2 454 "sint32" `212 
f B "abs" 2 454 "sint32(sint32 x)" `211 
f N "abs" 2 455 ""
v L "x" 2 455 "float" `214 
f B "abs" 2 455 "float(float x)" `213 
f N "_mul" 2 456 ""
v L "??65535" 2 456 "int8" `216 
v L "??65535" 2 456 "int8" `217 
f B "_mul" 2 456 "int16(int8 ,int8 )" `215 
f N "_mul" 2 457 ""
v L "??65535" 2 457 "sint8" `219 
v L "??65535" 2 457 "sint8" `220 
f B "_mul" 2 457 "sint16(sint8 ,sint8 )" `218 
f N "_mul" 2 458 ""
v L "??65535" 2 458 "int16" `222 
v L "??65535" 2 458 "int16" `223 
f B "_mul" 2 458 "int32(int16 ,int16 )" `221 
f N "_mul" 2 459 ""
v L "??65535" 2 459 "sint16" `225 
v L "??65535" 2 459 "sint16" `226 
f B "_mul" 2 459 "sint32(sint16 ,sint16 )" `224  "Memory Manipulation Prototypes:"
f N "read_bank" 2 462 ""
v L "bank" 2 462 "int8" `228 
v L "offset" 2 462 "int8" `229 
f B "read_bank" 2 462 "int8(int8 bank,int8 offset)" `227 
f N "write_bank" 2 463 ""
v L "bank" 2 463 "int8" `231 
v L "offset" 2 463 "int8" `232 
v L "value" 2 463 "int8" `233 
f B "write_bank" 2 463 "void(int8 bank,int8 offset,int8 value)" `230 
f N "strcpy" 2 464 ""
v L "dest" 2 464 "*int8" `235 
v L "src" 2 464 "*int8" `236 
f B "strcpy" 2 464 "void(*int8 dest,*int8 src)" `234 
f N "memset" 2 465 ""
v L "destination" 2 465 "*int8" `238 
v L "value" 2 465 "int8" `239 
v L "num" 2 465 "int16" `240 
f B "memset" 2 465 "void(*int8 destination,int8 value,int16 num)" `237 
f N "memcpy" 2 466 ""
v L "destination" 2 466 "*int8" `242 
v L "source" 2 466 "*int8" `243 
v L "num" 2 466 "int16" `244 
f B "memcpy" 2 466 "void(*int8 destination,*int8 source,int16 num)" `241  "String Prototypes:"
f N "toupper" 2 469 ""
v L "cvalue" 2 469 "int8" `246 
f B "toupper" 2 469 "int8(int8 cvalue)" `245 
f N "tolower" 2 470 ""
v L "cvalue" 2 470 "int8" `248 
f B "tolower" 2 470 "int8(int8 cvalue)" `247 
f N "sprintf" 2 471 ""
v L "string" 2 471 "*int8" `250 
v L "cstring" 2 471 "*int8" `251 
f B "sprintf" 2 471 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `249  "Data Manipulators Prototypes:"
f N "shift_left" 2 474 ""
v L "address" 2 474 "*int8" `254 
v L "bytes" 2 474 "int8" `255 
v L "value" 2 474 "int8" `256 
f B "shift_left" 2 474 "int8(*int8 address,int8 bytes,int8 value)" `253 
f N "shift_right" 2 475 ""
v L "address" 2 475 "*int8" `258 
v L "bytes" 2 475 "int8" `259 
v L "value" 2 475 "int8" `260 
f B "shift_right" 2 475 "int8(*int8 address,int8 bytes,int8 value)" `257 
f N "rotate_left" 2 476 ""
v L "address" 2 476 "*int8" `262 
v L "bytes" 2 476 "int8" `263 
f B "rotate_left" 2 476 "void(*int8 address,int8 bytes)" `261 
f N "rotate_right" 2 477 ""
v L "address" 2 477 "*int8" `265 
v L "bytes" 2 477 "int8" `266 
f B "rotate_right" 2 477 "void(*int8 address,int8 bytes)" `264 
f N "swap" 2 478 ""
v L "value" 2 478 "int8" `268 
f B "swap" 2 478 "void(int8 value)" `267 
f N "make8" 2 479 ""
v L "var" 2 479 "int16" `270 
v L "offset" 2 479 "int8" `271 
f B "make8" 2 479 "int8(int16 var,int8 offset)" `269 
f N "make8" 2 480 ""
v L "var" 2 480 "int32" `273 
v L "offset" 2 480 "int8" `274 
f B "make8" 2 480 "int8(int32 var,int8 offset)" `272 
f N "make16" 2 481 ""
v L "varhigh" 2 481 "int8" `276 
v L "varlow" 2 481 "int8" `277 
f B "make16" 2 481 "int16(int8 varhigh,int8 varlow)" `275 
f N "make32" 2 482 ""
v L "var1" 2 482 "int16" `279 
f B "make32" 2 482 "int32(int16 var1)" `278 
f N "make32" 2 483 ""
v L "var1" 2 483 "int16" `281 
v L "var2" 2 483 "int16" `282 
f B "make32" 2 483 "int32(int16 var1,int16 var2)" `280 
f N "make32" 2 484 ""
v L "var1" 2 484 "int16" `284 
v L "var2" 2 484 "int8" `285 
f B "make32" 2 484 "int32(int16 var1,int8 var2)" `283 
f N "make32" 2 485 ""
v L "var1" 2 485 "int16" `287 
v L "var2" 2 485 "int8" `288 
v L "var3" 2 485 "int8" `289 
f B "make32" 2 485 "int32(int16 var1,int8 var2,int8 var3)" `286 
f N "make32" 2 486 ""
v L "var1" 2 486 "int8" `291 
f B "make32" 2 486 "int32(int8 var1)" `290 
f N "make32" 2 487 ""
v L "var1" 2 487 "int8" `293 
v L "var2" 2 487 "int8" `294 
f B "make32" 2 487 "int32(int8 var1,int8 var2)" `292 
f N "make32" 2 488 ""
v L "var1" 2 488 "int8" `296 
v L "var2" 2 488 "int8" `297 
v L "var3" 2 488 "int8" `298 
f B "make32" 2 488 "int32(int8 var1,int8 var2,int8 var3)" `295 
f N "make32" 2 489 ""
v L "var1" 2 489 "int8" `300 
v L "var2" 2 489 "int8" `301 
v L "var3" 2 489 "int8" `302 
v L "var4" 2 489 "int8" `303 
f B "make32" 2 489 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `299 
f N "make32" 2 490 ""
v L "var1" 2 490 "int8" `305 
v L "var2" 2 490 "int16" `306 
f B "make32" 2 490 "int32(int8 var1,int16 var2)" `304 
f N "make32" 2 491 ""
v L "var1" 2 491 "int8" `308 
v L "var2" 2 491 "int16" `309 
v L "var3" 2 491 "int8" `310 
f B "make32" 2 491 "int32(int8 var1,int16 var2,int8 var3)" `307 
f N "make32" 2 492 ""
v L "var1" 2 492 "int8" `312 
v L "var2" 2 492 "int8" `313 
v L "var3" 2 492 "int16" `314 
f B "make32" 2 492 "int32(int8 var1,int8 var2,int16 var3)" `311 
f N "bit_set" 2 493 ""
v L "var" 2 493 "int8" `316 
v L "bit" 2 493 "int8" `317 
f B "bit_set" 2 493 "void(int8 var,int8 bit)" `315 
f N "bit_set" 2 494 ""
v L "var" 2 494 "int16" `319 
v L "bit" 2 494 "int8" `320 
f B "bit_set" 2 494 "void(int16 var,int8 bit)" `318 
f N "bit_set" 2 495 ""
v L "var" 2 495 "int32" `322 
v L "bit" 2 495 "int8" `323 
f B "bit_set" 2 495 "void(int32 var,int8 bit)" `321 
f N "bit_clear" 2 496 ""
v L "var" 2 496 "int8" `325 
v L "bit" 2 496 "int8" `326 
f B "bit_clear" 2 496 "void(int8 var,int8 bit)" `324 
f N "bit_clear" 2 497 ""
v L "var" 2 497 "int16" `328 
v L "bit" 2 497 "int8" `329 
f B "bit_clear" 2 497 "void(int16 var,int8 bit)" `327 
f N "bit_clear" 2 498 ""
v L "var" 2 498 "int32" `331 
v L "bit" 2 498 "int8" `332 
f B "bit_clear" 2 498 "void(int32 var,int8 bit)" `330 
f N "bit_test" 2 499 ""
v L "var" 2 499 "int8" `334 
v L "bit" 2 499 "int8" `335 
f B "bit_test" 2 499 "int8(int8 var,int8 bit)" `333 
f N "bit_test" 2 500 ""
v L "var" 2 500 "int16" `337 
v L "bit" 2 500 "int8" `338 
f B "bit_test" 2 500 "int8(int16 var,int8 bit)" `336 
f N "bit_test" 2 501 ""
v L "var" 2 501 "int32" `340 
v L "bit" 2 501 "int8" `341 
f B "bit_test" 2 501 "int8(int32 var,int8 bit)" `339  "#use delay() Prototypes:"
f N "delay_cycles" 2 504 ""
v L "count" 2 504 "int8" `343 
f B "delay_cycles" 2 504 "void(int8 count)" `342 
f N "delay_ms" 2 505 ""
v L "time" 2 505 "int16" `345 
f B "delay_ms" 2 505 "void(int16 time)" `344 
f N "delay_us" 2 506 ""
v L "time" 2 506 "int16" `347 
f B "delay_us" 2 506 "void(int16 time)" `346  "#use rs232() Prototypes:"
f N "putchar" 2 509 ""
v L "cdata" 2 509 "int8" `349 
f B "putchar" 2 509 "void(int8 cdata)" `348 
f N "putchar" 2 510 ""
v L "cdata" 2 510 "int8" `351 
v L "stream" 2 510 "int8" `352 
f B "putchar" 2 510 "void(int8 cdata,int8 stream)" `350 
f N "puts" 2 511 ""
v L "string" 2 511 "*int8" `354 
f B "puts" 2 511 "void(*int8 string)" `353 
f N "puts" 2 512 ""
v L "string" 2 512 "*int8" `356 
v L "stream" 2 512 "int8" `357 
f B "puts" 2 512 "void(*int8 string,int8 stream)" `355 
f N "getch" 2 513 ""
f B "getch" 2 513 "int8()" `358 
f N "getch" 2 514 ""
v L "stream" 2 514 "int8" `360 
f B "getch" 2 514 "int8(int8 stream)" `359 
f N "gets" 2 515 ""
v L "string" 2 515 "*int8" `362 
f B "gets" 2 515 "void(*int8 string)" `361 
f N "gets" 2 516 ""
v L "string" 2 516 "*int8" `364 
v L "stream" 2 516 "int8" `365 
f B "gets" 2 516 "void(*int8 string,int8 stream)" `363 
f N "kbhit" 2 517 ""
f B "kbhit" 2 517 "int8()" `366 
f N "kbhit" 2 518 ""
v L "stream" 2 518 "int8" `368 
f B "kbhit" 2 518 "int8(int8 stream)" `367 
f N "printf" 2 519 ""
v L "string" 2 519 "*int8" `370 
f B "printf" 2 519 "void(*int8 string,*int8 _VA_LIST)" `369 
f N "fprintf" 2 520 ""
v L "stream" 2 520 "int8" `373 
v L "string" 2 520 "*int8" `374 
f B "fprintf" 2 520 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `372 
f N "putc_send" 2 521 ""
f B "putc_send" 2 521 "void()" `376 
f N "fputc_send" 2 522 ""
v L "stream" 2 522 "int8" `378 
f B "fputc_send" 2 522 "void(int8 stream)" `377 
f N "rcv_buffer_full" 2 523 ""
f B "rcv_buffer_full" 2 523 "int8()" `379 
f N "rcv_buffer_full" 2 524 ""
v L "stream" 2 524 "int8" `381 
f B "rcv_buffer_full" 2 524 "int8(int8 stream)" `380 
f N "rcv_buffer_bytes" 2 525 ""
f B "rcv_buffer_bytes" 2 525 "int16()" `382 
f N "rcv_buffer_bytes" 2 526 ""
v L "stream" 2 526 "int8" `384 
f B "rcv_buffer_bytes" 2 526 "int16(int8 stream)" `383 
f N "tx_buffer_full" 2 527 ""
f B "tx_buffer_full" 2 527 "int8()" `385 
f N "tx_buffer_full" 2 528 ""
v L "stream" 2 528 "int8" `387 
f B "tx_buffer_full" 2 528 "int8(int8 stream)" `386 
f N "tx_buffer_bytes" 2 529 ""
f B "tx_buffer_bytes" 2 529 "int16()" `388 
f N "tx_buffer_bytes" 2 530 ""
v L "stream" 2 530 "int8" `390 
f B "tx_buffer_bytes" 2 530 "int16(int8 stream)" `389  "#use i2c() Prototypes:"
f N "i2c_read" 2 533 ""
f B "i2c_read" 2 533 "int8()" `391 
f N "i2c_read" 2 534 ""
v L "ack" 2 534 "int8" `393 
f B "i2c_read" 2 534 "int8(int8 ack)" `392 
f N "i2c_read" 2 535 ""
v L "stream" 2 535 "int8" `395 
v L "ack" 2 535 "int8" `396 
f B "i2c_read" 2 535 "int8(int8 stream,int8 ack)" `394 
f N "i2c_write" 2 536 ""
v L "data" 2 536 "int8" `398 
f B "i2c_write" 2 536 "int8(int8 data)" `397 
f N "i2c_write" 2 537 ""
v L "stream" 2 537 "int8" `400 
v L "data" 2 537 "int8" `401 
f B "i2c_write" 2 537 "int8(int8 stream,int8 data)" `399 
f N "i2c_start" 2 538 ""
f B "i2c_start" 2 538 "void()" `402 
f N "i2c_start" 2 539 ""
v L "stream" 2 539 "int8" `404 
f B "i2c_start" 2 539 "void(int8 stream)" `403 
f N "i2c_start" 2 540 ""
v L "stream" 2 540 "int8" `406 
v L "restart" 2 540 "int8" `407 
f B "i2c_start" 2 540 "void(int8 stream,int8 restart)" `405 
f N "i2c_stop" 2 541 ""
f B "i2c_stop" 2 541 "void()" `408 
f N "i2c_stop" 2 542 ""
v L "stream" 2 542 "int8" `410 
f B "i2c_stop" 2 542 "void(int8 stream)" `409 
f N "i2c_isr_state" 2 543 ""
f B "i2c_isr_state" 2 543 "int8()" `411 
f N "i2c_slaveaddr" 2 544 ""
v L "addr" 2 544 "int8" `413 
f B "i2c_slaveaddr" 2 544 "void(int8 addr)" `412 
f N "i2c_slaveaddr" 2 545 ""
v L "stream" 2 545 "int8" `415 
v L "addr" 2 545 "int8" `416 
f B "i2c_slaveaddr" 2 545 "void(int8 stream,int8 addr)" `414 
f N "i2c_poll" 2 546 ""
f B "i2c_poll" 2 546 "int8()" `417 
f N "i2c_poll" 2 547 ""
v L "stream" 2 547 "int8" `419 
f B "i2c_poll" 2 547 "int8(int8 stream)" `418 
f N "i2c_init" 2 548 ""
v L "baud" 2 548 "int32" `421 
f B "i2c_init" 2 548 "void(int32 baud)" `420 
f N "i2c_init" 2 549 ""
v L "stream" 2 549 "int8" `423 
v L "baud" 2 549 "int32" `424 
f B "i2c_init" 2 549 "void(int8 stream,int32 baud)" `422 
f N "i2c_transfer" 2 550 ""
v L "address" 2 550 "int8" `426 
v L "wData" 2 550 "*int8" `427 
v L "wCount" 2 550 "int8" `428 
f B "i2c_transfer" 2 550 "int8(int8 address,*int8 wData,int8 wCount)" `425 
f N "i2c_transfer" 2 551 ""
v L "address" 2 551 "int8" `430 
v L "wData" 2 551 "*int8" `431 
v L "wCount" 2 551 "int8" `432 
v L "rData" 2 551 "*int8" `433 
v L "rCount" 2 551 "*int8" `434 
f B "i2c_transfer" 2 551 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `429 
f N "i2c_transfer" 2 552 ""
v L "stream" 2 552 "int8" `436 
v L "address" 2 552 "int8" `437 
v L "wData" 2 552 "*int8" `438 
v L "wCount" 2 552 "int8" `439 
f B "i2c_transfer" 2 552 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `435 
f N "i2c_transfer" 2 553 ""
v L "stream" 2 553 "int8" `441 
v L "address" 2 553 "int8" `442 
v L "wData" 2 553 "*int8" `443 
v L "wCount" 2 553 "int8" `444 
v L "rData" 2 553 "*int8" `445 
v L "rCount" 2 553 "*int8" `446 
f B "i2c_transfer" 2 553 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `440 
f N "i2c_transfer_out" 2 554 ""
v L "address" 2 554 "int8" `448 
v L "wData" 2 554 "*int8" `449 
v L "wCount" 2 554 "int8" `450 
f B "i2c_transfer_out" 2 554 "int8(int8 address,*int8 wData,int8 wCount)" `447 
f N "i2c_transfer_out" 2 555 ""
v L "stream" 2 555 "int8" `452 
v L "address" 2 555 "int8" `453 
v L "wData" 2 555 "*int8" `454 
v L "wCount" 2 555 "int8" `455 
f B "i2c_transfer_out" 2 555 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `451 
f N "i2c_transfer_in" 2 556 ""
v L "address" 2 556 "int8" `457 
v L "rData" 2 556 "*int8" `458 
v L "rCount" 2 556 "int8" `459 
f B "i2c_transfer_in" 2 556 "int8(int8 address,*int8 rData,int8 rCount)" `456 
f N "i2c_transfer_in" 2 557 ""
v L "stream" 2 557 "int8" `461 
v L "address" 2 557 "int8" `462 
v L "rData" 2 557 "*int8" `463 
v L "rCount" 2 557 "int8" `464 
f B "i2c_transfer_in" 2 557 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `460  "#use spi() Prototypes:"
f N "spi_xfer" 2 560 ""
f B "spi_xfer" 2 560 "int8()" `465 
f N "spi_xfer" 2 561 ""
f G "spi_xfer" 2 561 "int16(int8 data)" `466 
f N "spi_xfer" 2 562 ""
f G "spi_xfer" 2 562 "int32(int8 data)" `466 
f N "spi_xfer" 2 563 ""
v L "data" 2 563 "int8" `467 
f B "spi_xfer" 2 563 "int8(int8 data)" `466 
f N "spi_xfer" 2 564 ""
v L "data" 2 564 "int16" `469 
f B "spi_xfer" 2 564 "int16(int16 data)" `468 
f N "spi_xfer" 2 565 ""
v L "data" 2 565 "int32" `471 
f B "spi_xfer" 2 565 "int32(int32 data)" `470 
f N "spi_xfer" 2 566 ""
v L "stream" 2 566 "int8" `473 
v L "data" 2 566 "int8" `474 
f B "spi_xfer" 2 566 "int8(int8 stream,int8 data)" `472 
f N "spi_xfer" 2 567 ""
v L "stream" 2 567 "int8" `476 
v L "data" 2 567 "int16" `477 
f B "spi_xfer" 2 567 "int16(int8 stream,int16 data)" `475 
f N "spi_xfer" 2 568 ""
v L "stream" 2 568 "int8" `479 
v L "data" 2 568 "int32" `480 
f B "spi_xfer" 2 568 "int32(int8 stream,int32 data)" `478 
f N "spi_xfer" 2 569 ""
v L "stream" 2 569 "int8" `482 
v L "data" 2 569 "int8" `483 
v L "bits" 2 569 "int8" `484 
f B "spi_xfer" 2 569 "int8(int8 stream,int8 data,int8 bits)" `481 
f N "spi_xfer" 2 570 ""
v L "stream" 2 570 "int8" `486 
v L "data" 2 570 "int16" `487 
v L "bits" 2 570 "int8" `488 
f B "spi_xfer" 2 570 "int16(int8 stream,int16 data,int8 bits)" `485 
f N "spi_xfer" 2 571 ""
v L "stream" 2 571 "int8" `490 
v L "data" 2 571 "int32" `491 
v L "bits" 2 571 "int8" `492 
f B "spi_xfer" 2 571 "int32(int8 stream,int32 data,int8 bits)" `489 
f N "spi_init" 2 572 ""
v L "baud" 2 572 "int32" `494 
f B "spi_init" 2 572 "void(int32 baud)" `493 
f N "spi_init" 2 573 ""
v L "stream" 2 573 "int8" `496 
v L "baud" 2 573 "int32" `497 
f B "spi_init" 2 573 "void(int8 stream,int32 baud)" `495 
f N "spi_speed" 2 574 ""
v L "baud" 2 574 "int32" `499 
f B "spi_speed" 2 574 "void(int32 baud)" `498 
f N "spi_speed" 2 575 ""
v L "stream" 2 575 "int8" `501 
v L "baud" 2 575 "int32" `502 
f B "spi_speed" 2 575 "void(int8 stream,int32 baud)" `500 
f N "spi_speed" 2 576 ""
v L "stream" 2 576 "int8" `504 
v L "baud" 2 576 "int32" `505 
v L "clock" 2 576 "int32" `506 
f B "spi_speed" 2 576 "void(int8 stream,int32 baud,int32 clock)" `503 
f N "spi_prewrite" 2 577 ""
v L "data" 2 577 "int8" `508 
f B "spi_prewrite" 2 577 "void(int8 data)" `507 
f N "spi_prewrite" 2 578 ""
v L "data" 2 578 "int16" `510 
f B "spi_prewrite" 2 578 "void(int16 data)" `509 
f N "spi_prewrite" 2 579 ""
v L "data" 2 579 "int32" `512 
f B "spi_prewrite" 2 579 "void(int32 data)" `511 
f N "spi_prewrite" 2 580 ""
v L "??65535" 2 580 "int8" `514 
v L "data" 2 580 "int8" `515 
f B "spi_prewrite" 2 580 "void(int8 ,int8 data)" `513 
f N "spi_prewrite" 2 581 ""
v L "??65535" 2 581 "int8" `517 
v L "data" 2 581 "int16" `518 
f B "spi_prewrite" 2 581 "void(int8 ,int16 data)" `516 
f N "spi_prewrite" 2 582 ""
v L "??65535" 2 582 "int8" `520 
v L "data" 2 582 "int32" `521 
f B "spi_prewrite" 2 582 "void(int8 ,int32 data)" `519 
f N "spi_xfer_in" 2 583 ""
f B "spi_xfer_in" 2 583 "int8()" `522 
f N "spi_xfer_in" 2 584 ""
f G "spi_xfer_in" 2 584 "int16(int8 bits)" `523 
f N "spi_xfer_in" 2 585 ""
f G "spi_xfer_in" 2 585 "int32(int8 bits)" `523 
f N "spi_xfer_in" 2 586 ""
v L "bits" 2 586 "int8" `524 
f B "spi_xfer_in" 2 586 "int8(int8 bits)" `523 
f N "spi_xfer_in" 2 587 ""
v L "bits" 2 587 "int8" `526 
f G "spi_xfer_in" 2 587 "int16(int8 bits,int8 bits)" `525 
f N "spi_xfer_in" 2 588 ""
v L "bits" 2 588 "int8" `526 
f G "spi_xfer_in" 2 588 "int32(int8 bits,int8 bits)" `525 
f N "spi_xfer_in" 2 589 ""
v L "stream" 2 589 "int8" `526 
v L "bits" 2 589 "int8" `527 
f B "spi_xfer_in" 2 589 "int8(int8 stream,int8 bits)" `525 
f N "spi_xfer_in" 2 590 ""
v L "stream" 2 590 "int8" `526 
v L "bits" 2 590 "int8" `530 
f G "spi_xfer_in" 2 590 "int16(int8 stream,int8 bits,int16 count)" `528 
f N "spi_xfer_in" 2 591 ""
v L "stream" 2 591 "int8" `526 
v L "bits" 2 591 "int8" `530 
f G "spi_xfer_in" 2 591 "int32(int8 stream,int8 bits,int16 count)" `528 
f N "spi_transfer" 2 592 ""
v L "wData" 2 592 "*int8" `529 
v L "rData" 2 592 "*int8" `530 
v L "count" 2 592 "int16" `531 
f B "spi_transfer" 2 592 "void(*int8 wData,*int8 rData,int16 count)" `528 
f N "spi_transfer" 2 593 ""
v L "stream" 2 593 "int8" `533 
v L "wData" 2 593 "*int8" `534 
v L "rData" 2 593 "*int8" `535 
v L "count" 2 593 "int16" `536 
f B "spi_transfer" 2 593 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `532 
f N "spi_transfer_write" 2 594 ""
v L "wData" 2 594 "*int8" `538 
v L "count" 2 594 "int16" `539 
f B "spi_transfer_write" 2 594 "void(*int8 wData,int16 count)" `537 
f N "spi_transfer_write" 2 595 ""
v L "stream" 2 595 "int8" `541 
v L "wData" 2 595 "*int8" `542 
v L "count" 2 595 "int16" `543 
f B "spi_transfer_write" 2 595 "void(int8 stream,*int8 wData,int16 count)" `540 
f N "spi_transfer_read" 2 596 ""
v L "rData" 2 596 "*int8" `545 
v L "count" 2 596 "int16" `546 
f B "spi_transfer_read" 2 596 "void(*int8 rData,int16 count)" `544 
f N "spi_transfer_read" 2 597 ""
v L "stream" 2 597 "int8" `548 
v L "rData" 2 597 "*int8" `549 
v L "count" 2 597 "int16" `550 
f B "spi_transfer_read" 2 597 "void(int8 stream,*int8 rData,int16 count)" `547  "#use rtos() Prototypes:"
f N "rtos_run" 2 600 ""
f B "rtos_run" 2 600 "void()" `551 
f N "rtos_yield" 2 601 ""
f B "rtos_yield" 2 601 "void()" `552 
f N "rtos_enable" 2 602 ""
v L "task" 2 602 "int8" `554 
f B "rtos_enable" 2 602 "void(int8 task)" `553 
f N "rtos_disable" 2 603 ""
v L "task" 2 603 "int8" `556 
f B "rtos_disable" 2 603 "void(int8 task)" `555 
f N "rtos_terminate" 2 604 ""
f B "rtos_terminate" 2 604 "void()" `557 
f N "rtos_await" 2 605 ""
v L "flag" 2 605 "int8" `559 
f B "rtos_await" 2 605 "void(int8 flag)" `558 
f N "rtos_wait" 2 606 ""
v L "sem" 2 606 "int8" `561 
f B "rtos_wait" 2 606 "void(int8 sem)" `560 
f N "rtos_signal" 2 607 ""
v L "sem" 2 607 "int8" `563 
f B "rtos_signal" 2 607 "void(int8 sem)" `562 
f N "rtos_msg_send" 2 608 ""
v L "task" 2 608 "int8" `565 
v L "msg" 2 608 "int8" `566 
f B "rtos_msg_send" 2 608 "void(int8 task,int8 msg)" `564 
f N "rtos_msg_read" 2 609 ""
f B "rtos_msg_read" 2 609 "int8()" `567 
f N "rtos_msg_poll" 2 610 ""
f B "rtos_msg_poll" 2 610 "int8()" `568 
f N "rtos_overrun" 2 611 ""
v L "task" 2 611 "int8" `570 
f B "rtos_overrun" 2 611 "int8(int8 task)" `569 
f N "rtos_stats" 2 612 ""
v L "task" 2 612 "int8" `572 
v L "stat" 2 612 "*int8" `573 
f B "rtos_stats" 2 612 "void(int8 task,*int8 stat)" `571  "#use timer() Prototypes:"
f N "get_ticks" 2 615 ""
f B "get_ticks" 2 615 "int8()" `574 
f N "get_ticks" 2 616 ""
f G "get_ticks" 2 616 "int16(int8 stream)" `575 
f N "get_ticks" 2 617 ""
f G "get_ticks" 2 617 "int32(int8 stream)" `575 
f N "get_ticks" 2 618 ""
v L "stream" 2 618 "int8" `576 
f B "get_ticks" 2 618 "int8(int8 stream)" `575 
f N "get_ticks" 2 619 ""
v L "stream" 2 619 "int8" `578 
f G "get_ticks" 2 619 "int16(int8 stream)" `577 
f N "get_ticks" 2 620 ""
v L "stream" 2 620 "int8" `578 
f G "get_ticks" 2 620 "int32(int8 stream)" `577 
f N "set_ticks" 2 621 ""
v L "value" 2 621 "int8" `578 
f B "set_ticks" 2 621 "void(int8 value)" `577 
f N "set_ticks" 2 622 ""
v L "value" 2 622 "int16" `580 
f B "set_ticks" 2 622 "void(int16 value)" `579 
f N "set_ticks" 2 623 ""
v L "value" 2 623 "int32" `582 
f B "set_ticks" 2 623 "void(int32 value)" `581 
f N "set_ticks" 2 624 ""
v L "stream" 2 624 "int8" `584 
v L "value" 2 624 "int8" `585 
f B "set_ticks" 2 624 "void(int8 stream,int8 value)" `583 
f N "set_ticks" 2 625 ""
v L "stream" 2 625 "int8" `587 
v L "value" 2 625 "int16" `588 
f B "set_ticks" 2 625 "void(int8 stream,int16 value)" `586 
f N "set_ticks" 2 626 ""
v L "stream" 2 626 "int8" `590 
v L "value" 2 626 "int32" `591 
f B "set_ticks" 2 626 "void(int8 stream,int32 value)" `589  "#use pwm() Prototypes:"
f N "pwm_on" 2 629 ""
f B "pwm_on" 2 629 "void()" `592 
f N "pwm_on" 2 630 ""
v L "stream" 2 630 "int8" `594 
f B "pwm_on" 2 630 "void(int8 stream)" `593 
f N "pwm_off" 2 631 ""
f B "pwm_off" 2 631 "void()" `595 
f N "pwm_off" 2 632 ""
v L "stream" 2 632 "int8" `597 
f B "pwm_off" 2 632 "void(int8 stream)" `596 
f N "pwm_set_duty" 2 633 ""
v L "duty" 2 633 "int16" `599 
f B "pwm_set_duty" 2 633 "void(int16 duty)" `598 
f N "pwm_set_duty" 2 634 ""
v L "stream" 2 634 "int8" `601 
v L "duty" 2 634 "int16" `602 
f B "pwm_set_duty" 2 634 "void(int8 stream,int16 duty)" `600 
f N "pwm_set_duty_percent" 2 635 ""
v L "percent" 2 635 "int16" `604 
f B "pwm_set_duty_percent" 2 635 "void(int16 percent)" `603 
f N "pwm_set_duty_percent" 2 636 ""
v L "stream" 2 636 "int8" `606 
v L "percent" 2 636 "int16" `607 
f B "pwm_set_duty_percent" 2 636 "void(int8 stream,int16 percent)" `605 
f N "pwm_set_frequency" 2 637 ""
v L "frequency" 2 637 "int32" `609 
f B "pwm_set_frequency" 2 637 "void(int32 frequency)" `608 
f N "pwm_set_frequency" 2 638 ""
v L "stream" 2 638 "int8" `611 
v L "frequency" 2 638 "int32" `612 
f B "pwm_set_frequency" 2 638 "void(int8 stream,int32 frequency)" `610 
f N "pwm_get_duty_period" 2 639 ""
f B "pwm_get_duty_period" 2 639 "int16()" `613 
f N "pwm_get_duty_period" 2 640 ""
v L "stream" 2 640 "int8" `615 
f B "pwm_get_duty_period" 2 640 "int16(int8 stream)" `614  "#use capture() Prototypes:"
f N "get_capture_time" 2 643 ""
f B "get_capture_time" 2 643 "int16()" `616 
f N "get_capture_time" 2 644 ""
v L "stream" 2 644 "int8" `618 
f B "get_capture_time" 2 644 "int16(int8 stream)" `617 
f N "get_capture_event" 2 645 ""
f B "get_capture_event" 2 645 "int8()" `619 
f N "get_capture_event" 2 646 ""
v L "stream" 2 646 "int8" `621 
f B "get_capture_event" 2 646 "int8(int8 stream)" `620  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 659 ""
v L "address" 2 659 "int16" `623 
f B "goto_address" 2 659 "void(int16 address)" `622 
f N "label_address" 2 660 ""
v L "label" 2 660 "int16" `625 
f B "label_address" 2 660 "int16(int16 label)" `624  "Program Memory Read Prototypes:"
f N "read_program_memory" 2 663 ""
v L "address" 2 663 "int16" `627 
v L "dataptr" 2 663 "*int8" `628 
v L "count" 2 663 "int16" `629 
f B "read_program_memory" 2 663 "void(int16 address,*int8 dataptr,int16 count)" `626 
f N "read_program_eeprom" 2 664 ""
v L "address" 2 664 "int16" `631 
f B "read_program_eeprom" 2 664 "int16(int16 address)" `630 
f N "read_configuration_memory" 2 665 ""
v L "dataptr" 2 665 "*int8" `633 
v L "count" 2 665 "int8" `634 
f B "read_configuration_memory" 2 665 "void(*int8 dataptr,int8 count)" `632 
f N "read_configuration_memory" 2 666 ""
v L "offset" 2 666 "int8" `636 
v L "dataptr" 2 666 "*int8" `637 
v L "count" 2 666 "int8" `638 
f B "read_configuration_memory" 2 666 "void(int8 offset,*int8 dataptr,int8 count)" `635  "Program Memory Write Prototypes:"
f N "write_program_memory" 2 669 ""
v L "address" 2 669 "int16" `640 
v L "dataptr" 2 669 "*int8" `641 
v L "count" 2 669 "int16" `642 
f B "write_program_memory" 2 669 "void(int16 address,*int8 dataptr,int16 count)" `639 
f N "write_program_eeprom" 2 670 ""
v L "address" 2 670 "int16" `644 
v L "data" 2 670 "int16" `645 
f B "write_program_eeprom" 2 670 "void(int16 address,int16 data)" `643 
f N "write_configuration_memory" 2 671 ""
v L "dataptr" 2 671 "*int8" `647 
v L "count" 2 671 "int8" `648 
f B "write_configuration_memory" 2 671 "void(*int8 dataptr,int8 count)" `646 
f N "write_configuration_memory" 2 672 ""
v L "offset" 2 672 "int8" `650 
v L "dataptr" 2 672 "*int8" `651 
v L "count" 2 672 "int8" `652 
f B "write_configuration_memory" 2 672 "void(int8 offset,*int8 dataptr,int8 count)" `649  "INT"
c L "write_configuration_memory" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 679 ""
v L "interrupt" 2 679 "int32" `654 
f B "enable_interrupts" 2 679 "void(int32 interrupt)" `653 
f N "disable_interrupts" 2 680 ""
v L "interrupt" 2 680 "int32" `656 
f B "disable_interrupts" 2 680 "void(int32 interrupt)" `655 
f N "clear_interrupt" 2 681 ""
v L "interrupt" 2 681 "int32" `658 
f B "clear_interrupt" 2 681 "void(int32 interrupt)" `657 
f N "interrupt_active" 2 682 ""
v L "interrupt" 2 682 "int32" `660 
f B "interrupt_active" 2 682 "int8(int32 interrupt)" `659 
f N "interrupt_enabled" 2 683 ""
v L "interrupt" 2 683 "int32" `662 
f B "interrupt_enabled" 2 683 "int8(int32 interrupt)" `661 
f N "ext_int_edge" 2 684 ""
v L "source" 2 684 "int8" `664 
v L "edge" 2 684 "int8" `665 
f B "ext_int_edge" 2 684 "void(int8 source,int8 edge)" `663 
f N "jump_to_isr" 2 685 ""
v L "address" 2 685 "int16" `667 
f B "jump_to_isr" 2 685 "void(int16 address)" `666  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 687 "0x40"
d G "H_TO_L" 2 688 "0"
d G "GLOBAL" 2 690 "0x0BC0"
d G "PERIPH" 2 691 "0x0B40"
d G "INT_EXT_L2H" 2 692 "0x50000B10"
d G "INT_EXT_H2L" 2 693 "0x60000B10"
d G "INT_EXT" 2 694 "0x300B10"
d G "INT_TIMER0" 2 695 "0x300B20"
d G "INT_TIMER1" 2 696 "0x309101"
d G "INT_TIMER2" 2 697 "0x309102"
d G "INT_CCP1" 2 698 "0x309104"
d G "INT_SSP" 2 699 "0x309108"
d G "INT_TBE" 2 700 "0x309110"
d G "INT_RDA" 2 701 "0x309120"
d G "INT_AD" 2 702 "0x309140"
d G "INT_TIMER1_GATE" 2 703 "0x309180"
d G "INT_BUSCOL" 2 704 "0x309208"
d G "INT_OSC_FAIL" 2 705 "0x309280"
d G "INT_CCP2" 2 706 "0x309201"
d G "INT_IOC" 2 707 "0x3FFF0B08"
d G "INT_IOC_B0" 2 708 "0x31010B08"
d G "INT_IOC_B0_L2H" 2 709 "0x11010B08"
d G "INT_IOC_B0_H2L" 2 710 "0x21010B08"
d G "INT_IOC_B1" 2 711 "0x31020B08"
d G "INT_IOC_B1_L2H" 2 712 "0x11020B08"
d G "INT_IOC_B1_H2L" 2 713 "0x21020B08"
d G "INT_IOC_B2" 2 714 "0x31040B08"
d G "INT_IOC_B2_L2H" 2 715 "0x11040B08"
d G "INT_IOC_B2_H2L" 2 716 "0x21040B08"
d G "INT_IOC_B3" 2 717 "0x31080B08"
d G "INT_IOC_B3_L2H" 2 718 "0x11080B08"
d G "INT_IOC_B3_H2L" 2 719 "0x21080B08"
d G "INT_IOC_B4" 2 720 "0x31100B08"
d G "INT_IOC_B4_L2H" 2 721 "0x11100B08"
d G "INT_IOC_B4_H2L" 2 722 "0x21100B08"
d G "INT_IOC_B5" 2 723 "0x31200B08"
d G "INT_IOC_B5_L2H" 2 724 "0x11200B08"
d G "INT_IOC_B5_H2L" 2 725 "0x21200B08"
d G "INT_IOC_B6" 2 726 "0x31400B08"
d G "INT_IOC_B6_L2H" 2 727 "0x11400B08"
d G "INT_IOC_B6_H2L" 2 728 "0x21400B08"
d G "INT_IOC_B7" 2 729 "0x31800B08"
d G "INT_IOC_B7_L2H" 2 730 "0x11800B08"
d G "INT_IOC_B7_H2L" 2 731 "0x21800B08"
d G "INT_RB" 2 738 "0x30FF0B08"
d G "INT_RB0" 2 739 "0x31010B08"
d G "INT_RB0_L2H" 2 740 "0x11010B08"
d G "INT_RB0_H2L" 2 741 "0x21010B08"
d G "INT_RB1" 2 742 "0x31020B08"
d G "INT_RB1_L2H" 2 743 "0x11020B08"
d G "INT_RB1_H2L" 2 744 "0x21020B08"
d G "INT_RB2" 2 745 "0x31040B08"
d G "INT_RB2_L2H" 2 746 "0x11040B08"
d G "INT_RB2_H2L" 2 747 "0x21040B08"
d G "INT_RB3" 2 748 "0x31080B08"
d G "INT_RB3_L2H" 2 749 "0x11080B08"
d G "INT_RB3_H2L" 2 750 "0x21080B08"
d G "INT_RB4" 2 751 "0x31100B08"
d G "INT_RB4_L2H" 2 752 "0x11100B08"
d G "INT_RB4_H2L" 2 753 "0x21100B08"
d G "INT_RB5" 2 754 "0x31200B08"
d G "INT_RB5_L2H" 2 755 "0x11200B08"
d G "INT_RB5_H2L" 2 756 "0x21200B08"
d G "INT_RB6" 2 757 "0x31400B08"
d G "INT_RB6_L2H" 2 758 "0x11400B08"
d G "INT_RB6_H2L" 2 759 "0x21400B08"
d G "INT_RB7" 2 760 "0x31800B08"
d G "INT_RB7_L2H" 2 761 "0x11800B08"
d G "INT_RB7_H2L" 2 762 "0x21800B08"
D G "led" 1 8 "PIN_C2"
C L "jump_to_isr" 1 4 1 "FUNCTION"
D G "TinyGPS_h" 3 25 ""
V G "segundos_ABS" 3 27 "int32" `677 
C L "jump_to_isr" 3 1 5 "FUNCTION"
D G "_STDLIB" 4 13 ""
D G "RAND_MAX" 4 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 4 26 "1"
T G "div_t" 4 34 "{sint8 quot,sint8 rem}" `681 
T G "ldiv_t" 4 39 "{sint16 quot,sint16 rem}" `685  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 5 13 ""
D G "ptrdiff_t" 5 18 "unsigned int16"
D G "size_t" 5 22 "unsigned int8"
D G "wchar_t" 5 26 "unsigned char"
D G "NULL" 5 27 "0"
D G "offsetof" 5 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_isr" 4 44 2 "FUNCTION"
C L "jump_to_isr" 4 47 1 "*"
C L "jump_to_isr" 4 47 1 "*"
F N "atoi" 4 51 ""
V L "s" 4 51 "*int8" `687 
f G "atoi" 4 51 "sint8(*int8 s)" `686  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 4 59 ""
V L "s" 4 59 "*int8" `689 
f G "atoi32" 4 59 "sint32(*int8 s)" `688  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 4 47 2 "FUNCTION"
F N "itoa" 4 80 ""
V L "num" 4 80 "sint32" `691 
V L "base" 4 80 "int8" `692 
V L "s" 4 80 "*int8" `693 
f G "itoa" 4 80 "*int8(sint32 num,int8 base,*int8 s)" `690  "Standard template: signed int16  atol(char * s)"
C L "itoa" 4 82 1 "*"
C L "itoa" 4 82 1 "*"
F N "atol" 4 86 ""
V L "s" 4 86 "*int8" `695 
f G "atol" 4 86 "sint16(*int8 s)" `694  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 4 88 1 "*"
C L "atol" 4 88 1 "*"
C L "atol" 4 88 1 "*"
C L "atol" 4 88 1 "*"
F N "strtol" 4 94 ""
V L "s" 4 94 "*int8" `697 
V L "endptr" 4 94 "*int8" `698 
V L "base" 4 94 "sint8" `699 
f G "strtol" 4 94 "sint16(*int8 s,*int8 endptr,sint8 base)" `696  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 4 96 1 "*"
C L "strtol" 4 96 1 "*"
C L "strtol" 4 96 1 "*"
C L "strtol" 4 96 1 "*"
F N "strtoul" 4 102 ""
V L "s" 4 102 "*int8" `701 
V L "endptr" 4 102 "*int8" `702 
V L "base" 4 102 "sint8" `703 
f G "strtoul" 4 102 "int16(*int8 s,*int8 endptr,sint8 base)" `700  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 4 96 2 "FUNCTION"
C L "strtoul" 4 104 1 "*"
C L "strtoul" 4 104 1 "*"
C L "strtoul" 4 104 1 "*"
F N "strtof" 4 111 ""
V L "s" 4 111 "*int8" `705 
V L "endptr" 4 111 "??0 *" `706 
f G "strtof" 4 111 "float(*int8 s,??0 * endptr)" `704  "provided for compatibility"
D G "strtof48" 4 117 "(s,e) strtof(s, e)"
D G "strtod" 4 118 "(s,e) strtof(s, e)"
C L "strtof" 4 104 1 "FUNCTION"
C L "strtof" 4 121 1 "*"
D G "atof" 4 125 "(s)   strtof(s, (char*)0)"
C L "strtof" 4 121 1 "FUNCTION"
C L "strtof" 4 144 1 "*"
C L "strtof" 4 144 1 "*"
C L "strtof" 4 144 1 "*"
F N "atoe" 4 150 ""
V L "s" 4 150 "*int8" `709 
f G "atoe" 4 150 "float(*int8 s)" `708  "Pseudo-random sequence generation functions"
C L "atoe" 4 144 1 "FUNCTION"
C L "atoe" 4 161 1 "*"
C L "atoe" 4 161 1 "*"
C L "atoe" 4 161 1 "*"
C L "atoe" 4 161 1 "*"
C L "atoe" 4 161 1 "*"
F N "rand" 4 170 ""
f G "rand" 4 170 "int16()" `710  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
C L "rand" 4 172 1 "*"
F N "srand" 4 192 ""
V L "seed" 4 192 "int32" `712 
f G "srand" 4 192 "void(int32 seed)" `711  "Memory management functions"
C L "srand" 4 172 3 "FUNCTION"
F N "system" 4 206 ""
V L "string" 4 206 "*int8" `714 
f G "system" 4 206 "sint8(*int8 string)" `713  "Searching and sorting utilities"
C L "system" 4 172 1 "FUNCTION"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 1 "*"
C L "system" 4 212 4 "*"
C L "system" 4 230 1 "*"
C L "system" 4 230 1 "*"
C L "system" 4 230 1 "*"
C L "system" 4 230 1 "*"
C L "system" 4 230 1 "*"
C L "system" 4 230 1 "*"
C L "system" 4 230 1 "*"
C L "system" 4 230 1 "*"
D G "labs" 4 250 "abs"
F N "div" 4 252 ""
V L "numer" 4 252 "sint8" `716 
V L "denom" 4 252 "sint8" `717 
f G "div" 4 252 "div_t(sint8 numer,sint8 denom)" `715 
F N "ldiv" 4 253 ""
V L "numer" 4 253 "sint16" `719 
V L "denom" 4 253 "sint16" `720 
f G "ldiv" 4 253 "ldiv_t(sint16 numer,sint16 denom)" `718  "Multibyte character functions"
C L "ldiv" 4 230 4 "FUNCTION"
C L "ldiv" 5 2 7 "FUNCTION"
D G "_STRING" 6 12 ""
C L "ldiv" 5 2 7 "FUNCTION"
D G "_CTYPE" 7 12 ""
D G "islower" 7 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 7 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 7 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 7 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 7 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 7 19 "(x)  ((x)==' ')"
D G "isxdigit" 7 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 7 21 "(x)  ((x)<' ')"
D G "isprint" 7 22 "(x)  ((x)>=' ')"
D G "isgraph" 7 23 "(x)  ((x)>' ')"
D G "ispunct" 7 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 6 19 10 "FUNCTION"
F N "memmove" 6 34 ""
V L "s1" 6 34 "*void" `722 
V L "s2" 6 34 "*void" `723 
V L "n" 6 34 "int8" `724 
F G "memmove" 6 35 "*int8(*void s1,*void s2,int8 n)" `721 
V L "sc1" 6 36 "*int8" `725 
V L "sc2" 6 37 "*int8" `726 
D G "strcopy" 6 54 "strcpy"
C L "strncpy" 6 19 4 "FUNCTION"
F N "strncpy" 6 61 ""
V L "s1" 6 61 "*int8" `728 
V L "s2" 6 61 "*int8" `729 
V L "n" 6 61 "int8" `730 
F G "strncpy" 6 62 "*int8(*int8 s1,*int8 s2,int8 n)" `727 
V L "s" 6 63 "*int8" `731 
C L "strcat" 6 19 3 "FUNCTION"
F N "strcat" 6 78 ""
V L "s1" 6 78 "*int8" `733 
V L "s2" 6 78 "*int8" `734 
F G "strcat" 6 79 "*int8(*int8 s1,*int8 s2)" `732 
V L "s" 6 80 "*int8" `735 
C L "strncat" 6 19 2 "FUNCTION"
F N "strncat" 6 96 ""
V L "s1" 6 96 "*int8" `737 
V L "s2" 6 96 "*int8" `738 
V L "n" 6 96 "int8" `739 
F G "strncat" 6 97 "*int8(*int8 s1,*int8 s2,int8 n)" `736 
V L "s" 6 98 "*int8" `740 
C L "memcmp" 6 19 3 "FUNCTION"
F N "memcmp" 6 120 ""
V L "s1" 6 120 "*void" `742 
V L "s2" 6 120 "*void" `743 
V L "n" 6 120 "int8" `744 
F G "memcmp" 6 121 "sint8(*void s1,*void s2,int8 n)" `741 
V L "su1" 6 122 "*int8" `745 
V L "su2" 6 122 "*int8" `746 
C L "strcmp" 6 19 2 "FUNCTION"
F N "strcmp" 6 134 ""
V L "s1" 6 134 "*int8" `748 
V L "s2" 6 134 "*int8" `749 
F G "strcmp" 6 135 "sint8(*int8 s1,*int8 s2)" `747 
C L "strcoll" 6 19 2 "FUNCTION"
F N "strcoll" 6 144 ""
V L "s1" 6 144 "*int8" `751 
V L "s2" 6 144 "*int8" `752 
F G "strcoll" 6 145 "sint8(*int8 s1,*int8 s2)" `750 
C L "strncmp" 6 19 4 "FUNCTION"
F N "strncmp" 6 157 ""
V L "s1" 6 157 "*int8" `754 
V L "s2" 6 157 "*int8" `755 
V L "n" 6 157 "int8" `756 
F G "strncmp" 6 158 "sint8(*int8 s1,*int8 s2,int8 n)" `753 
C L "strxfrm" 6 19 4 "FUNCTION"
F N "strxfrm" 6 170 ""
V L "s1" 6 170 "*int8" `758 
V L "s2" 6 170 "*int8" `759 
V L "n" 6 170 "int8" `760 
F G "strxfrm" 6 171 "int8(*int8 s1,*int8 s2,int8 n)" `757 
V L "c" 6 172 "int8" `761 
V L "n1" 6 173 "int8" `762 
C L "strxfrm" 6 19 1 "FUNCTION"
C L "memchr" 6 19 3 "FUNCTION"
F N "memchr" 6 201 ""
V L "s" 6 201 "*void" `764 
V L "c" 6 201 "int8" `765 
V L "n" 6 201 "int8" `766 
F G "memchr" 6 202 "*int8(*void s,int8 c,int8 n)" `763 
V L "uc" 6 203 "int8" `767 
V L "su" 6 204 "*int8" `768 
C L "strchr" 6 19 2 "FUNCTION"
F N "strchr" 6 215 ""
V L "s" 6 215 "*int8" `770 
V L "c" 6 215 "int8" `771 
F G "strchr" 6 216 "*int8(*int8 s,int8 c)" `769 
C L "strcspn" 6 19 4 "FUNCTION"
F N "strcspn" 6 227 ""
V L "s1" 6 227 "*int8" `773 
V L "s2" 6 227 "*int8" `774 
F G "strcspn" 6 228 "int8(*int8 s1,*int8 s2)" `772 
V L "sc1" 6 229 "*int8" `775 
V L "sc2" 6 229 "*int8" `776 
C L "strpbrk" 6 19 4 "FUNCTION"
F N "strpbrk" 6 242 ""
V L "s1" 6 242 "*int8" `778 
V L "s2" 6 242 "*int8" `779 
F G "strpbrk" 6 243 "*int8(*int8 s1,*int8 s2)" `777 
V L "sc1" 6 244 "*int8" `780 
V L "sc2" 6 244 "*int8" `781 
C L "strrchr" 6 19 2 "FUNCTION"
F N "strrchr" 6 257 ""
V L "s" 6 257 "*int8" `783 
V L "c" 6 257 "int8" `784 
F G "strrchr" 6 258 "*int8(*int8 s,int8 c)" `782 
V L "p" 6 259 "*int8" `785 
C L "strspn" 6 19 2 "FUNCTION"
F N "strspn" 6 272 ""
V L "s1" 6 272 "*int8" `787 
V L "s2" 6 272 "*int8" `788 
F G "strspn" 6 273 "int8(*int8 s1,*int8 s2)" `786 
V L "sc1" 6 274 "*int8" `789 
V L "sc2" 6 274 "*int8" `790 
C L "strstr" 6 19 6 "FUNCTION"
F N "strstr" 6 291 ""
V L "s1" 6 291 "*int8" `792 
V L "s2" 6 291 "*int8" `793 
F G "strstr" 6 292 "*int8(*int8 s1,*int8 s2)" `791 
V L "s" 6 293 "*int8" `794 
V L "t" 6 293 "*int8" `795 
C L "strlen" 6 19 2 "FUNCTION"
F N "strlen" 6 318 ""
V L "s" 6 318 "*int8" `797 
F G "strlen" 6 319 "int8(*int8 s)" `796 
V L "sc" 6 320 "*int8" `798 
C L "strtok" 6 19 13 "FUNCTION"
F N "strtok" 6 341 ""
V L "s1" 6 341 "*int8" `800 
V L "s2" 6 341 "*int8" `801 
F G "strtok" 6 342 "*int8(*int8 s1,*int8 s2)" `799 
V L "beg" 6 343 "*int8" `802 
V L "end" 6 343 "*int8" `803 
V L "save" 6 344 "*int8" `804 
C L "stricmp" 6 19 6 "FUNCTION"
F N "stricmp" 6 392 ""
V L "s1" 6 392 "*int8" `806 
V L "s2" 6 392 "*int8" `807 
F G "stricmp" 6 393 "sint8(*int8 s1,*int8 s2)" `805 
C L "strlwr" 6 19 3 "FUNCTION"
F N "strlwr" 6 406 ""
V L "s" 6 406 "*int8" `811 
F G "strlwr" 6 407 "*int8(*int8 s)" `810 
V L "p" 6 408 "*int8" `812 
C L "strupr" 6 19 3 "FUNCTION"
F N "strupr" 6 420 ""
V L "s" 6 420 "*int8" `814 
F G "strupr" 6 421 "*int8(*int8 s)" `813 
V L "p" 6 422 "*int8" `815 
F N "div" 4 275 ""
V L "numer" 4 275 "sint8" `716 
V L "denom" 4 275 "sint8" `818 
F G "div" 4 276 "div_t(sint8 numer,sint8 denom)" `715 
V L "val" 4 277 "div_t" `816 
F N "ldiv" 4 283 ""
V L "numer" 4 283 "sint16" `719 
V L "denom" 4 283 "sint16" `825 
F G "ldiv" 4 284 "ldiv_t(sint16 numer,sint16 denom)" `718 
V L "val" 4 285 "ldiv_t" `823 
F N "atoe" 4 362 ""
V L "s" 4 362 "*int8" `831 
F G "atoe" 4 363 "float(*int8 s)" `708 
V L "pow10" 4 364 "float" `830 
V L "result" 4 365 "float" `831 
V L "sign" 4 366 "int8" `832 
V L "expsign" 4 367 "int8" `833 
V L "c" 4 368 "int8" `834 
V L "ptr" 4 369 "int8" `835 
V L "i" 4 370 "int8" `836 
V L "exp" 4 371 "float" `837 
V L "expcnt" 4 372 "int8" `838 
C L "atoe" 4 398 1 "FUNCTION"
F N "atoi" 4 430 ""
V L "s" 4 430 "*int8" `851 
F G "atoi" 4 431 "sint8(*int8 s)" `686 
V L "result" 4 432 "sint8" `850 
V L "sign" 4 433 "int8" `851 
V L "base" 4 433 "int8" `852 
V L "index" 4 433 "int8" `853 
V L "c" 4 434 "int8" `854 
C L "atoi" 4 398 1 "FUNCTION"
C L "atoi" 4 398 1 "FUNCTION"
C L "atoi" 4 398 1 "FUNCTION"
C L "atoi" 4 398 1 "FUNCTION"
C L "atoi" 4 398 1 "FUNCTION"
C L "atoi" 4 398 1 "FUNCTION"
F N "atol" 4 499 ""
V L "s" 4 499 "*int8" `856 
F G "atol" 4 500 "sint16(*int8 s)" `694 
V L "result" 4 501 "sint16" `855 
V L "sign" 4 502 "int8" `856 
V L "base" 4 502 "int8" `857 
V L "index" 4 502 "int8" `858 
V L "c" 4 503 "int8" `859 
C L "atol" 4 398 1 "FUNCTION"
C L "atol" 4 398 1 "FUNCTION"
C L "atol" 4 398 1 "FUNCTION"
C L "atol" 4 398 1 "FUNCTION"
C L "mult_with10" 4 398 1 "FUNCTION"
F N "mult_with10" 4 566 ""
V L "num" 4 566 "int32" `861 
F G "mult_with10" 4 567 "sint32(int32 num)" `860 
F N "atoi32" 4 572 ""
V L "s" 4 572 "*int8" `863 
F G "atoi32" 4 573 "sint32(*int8 s)" `688 
V L "result" 4 574 "sint32" `862 
V L "sign" 4 575 "int8" `863 
V L "base" 4 575 "int8" `864 
V L "index" 4 575 "int8" `865 
V L "c" 4 576 "int8" `866 
C L "atoi32" 4 398 1 "FUNCTION"
C L "atoi32" 4 398 1 "FUNCTION"
C L "atoi32" 4 398 1 "FUNCTION"
C L "atoi32" 4 398 1 "FUNCTION"
C L "atoi32" 4 398 1 "FUNCTION"
F N "itoa" 4 771 ""
V L "num" 4 771 "sint32" `691 
V L "base" 4 771 "int8" `692 
V L "s" 4 771 "*int8" `870 
F G "itoa" 4 772 "*int8(sint32 num,int8 base,*int8 s)" `690 
V L "temp" 4 773 "int32" `867 
V L "i" 4 774 "int8" `868 
V L "sign" 4 774 "int8" `869 
V L "cnt" 4 774 "int8" `870 
V L "c" 4 775 "int8" `871 
C L "itoa" 4 398 1 "FUNCTION"
C L "itoa" 4 398 1 "FUNCTION"
C L "itoa" 4 398 1 "FUNCTION"
C L "itoa" 4 398 1 "FUNCTION"
C L "itoa" 4 398 1 "FUNCTION"
F N "strtof" 4 886 ""
V L "s" 4 886 "*int8" `705 
V L "endptr" 4 886 "??0 *" `880 
F G "strtof" 4 887 "float(*int8 s,??0 * endptr)" `704 
V L "pow10" 4 888 "float" `878 
V L "result" 4 889 "float" `879 
V L "skip" 4 890 "int1" `880 
V L "sign" 4 890 "int1" `881 
V L "point" 4 890 "int1" `882 
V L "c" 4 891 "int8" `883 
V L "ptr" 4 892 "int8" `884 
F N "strtoul" 4 1104 ""
V L "s" 4 1104 "*int8" `701 
V L "endptr" 4 1104 "*int8" `702 
V L "base" 4 1104 "sint8" `889 
F G "strtoul" 4 1105 "int16(*int8 s,*int8 endptr,sint8 base)" `700 
V L "sc" 4 1106 "*int8" `886 
V L "s1" 4 1106 "*int8" `887 
V L "sd" 4 1106 "*int8" `888 
V L "x" 4 1107 "int16" `889 
V L "sign" 4 1108 "int8" `890 
V L "digits" 4 1109 "int8[1]" `891 
C L "strtoul" 4 398 1 "FUNCTION"
C L "strtoul" 4 398 1 "FUNCTION"
C L "strtoul" 4 398 1 "FUNCTION"
F N "strtol" 4 1166 ""
V L "s" 4 1166 "*int8" `697 
V L "endptr" 4 1166 "*int8" `698 
V L "base" 4 1166 "sint8" `896 
F G "strtol" 4 1167 "sint16(*int8 s,*int8 endptr,sint8 base)" `696 
V L "sc" 4 1168 "*int8" `893 
V L "s1" 4 1168 "*int8" `894 
V L "sd" 4 1168 "*int8" `895 
V L "x" 4 1169 "sint16" `896 
V L "sign" 4 1170 "int8" `897 
V L "digits" 4 1171 "int8[1]" `898 
C L "strtol" 4 398 1 "FUNCTION"
C L "strtol" 4 398 1 "FUNCTION"
C L "strtol" 4 398 1 "FUNCTION"
F N "system" 4 1229 ""
V L "string" 4 1229 "*int8" `901 
F G "system" 4 1230 "sint8(*int8 string)" `713 
F N "mblen" 4 1234 ""
V L "s" 4 1234 "*int8" `901 
V L "n" 4 1234 "int8" `902 
F G "mblen" 4 1235 "int8(*int8 s,int8 n)" `900 
F N "mbtowc" 4 1239 ""
V L "pwc" 4 1239 "*int8" `904 
V L "s" 4 1239 "*int8" `905 
V L "n" 4 1239 "int8" `906 
F G "mbtowc" 4 1240 "int8(*int8 pwc,*int8 s,int8 n)" `903 
F N "wctomb" 4 1245 ""
V L "s" 4 1245 "*int8" `908 
V L "wchar" 4 1245 "int8" `909 
F G "wctomb" 4 1246 "int8(*int8 s,int8 wchar)" `907 
F N "mbstowcs" 4 1251 ""
V L "pwcs" 4 1251 "*int8" `911 
V L "s" 4 1251 "*int8" `912 
V L "n" 4 1251 "int8" `913 
F G "mbstowcs" 4 1252 "int8(*int8 pwcs,*int8 s,int8 n)" `910 
F N "wcstombs" 4 1257 ""
V L "s" 4 1257 "*int8" `915 
V L "pwcs" 4 1257 "*int8" `916 
V L "n" 4 1257 "int8" `917 
F G "wcstombs" 4 1258 "int8(*int8 s,*int8 pwcs,int8 n)" `914 
V G "_Randseed" 4 1267 "int32" `918 
F N "rand" 4 1269 ""
F G "rand" 4 1270 "int16()" `710 
F N "srand" 4 1275 ""
V L "seed" 4 1275 "int32" `923 
F G "srand" 4 1276 "void(int32 seed)" `711 
F N "*_Cmpfun" 4 1285 ""
V L "p1" 4 1285 "*int8" `923 
V L "p2" 4 1285 "*int8" `924 
T G "*_Cmpfun" 4 1285 "sint8(*int8 p1,*int8 p2)" `922 
F N "qsort" 4 1292 ""
V L "qdata" 4 1292 "*int8" `927 
V L "qitems" 4 1292 "int8" `928 
V L "qsize" 4 1292 "int8" `929 
V L "cmp" 4 1292 "_Cmpfun" `930 
F G "qsort" 4 1292 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `926 
V L "m" 4 1293 "int8" `931 
V L "j" 4 1293 "int8" `932 
V L "i" 4 1293 "int8" `933 
V L "l" 4 1293 "int8" `934 
V L "done" 4 1294 "int1" `935 
V L "t" 4 1295 "int8[16]" `936 
F N "bsearch" 4 1320 ""
V L "key" 4 1320 "*int8" `939 
V L "base" 4 1320 "*int8" `940 
V L "num" 4 1320 "int8" `941 
V L "width" 4 1320 "int8" `942 
V L "cmp" 4 1320 "_Cmpfun" `943 
F G "bsearch" 4 1321 "*int8(*int8 key,*int8 base,int8 num,int8 width,_Cmpfun cmp)" `938 
V L "p" 4 1322 "*int8" `944 
V L "q" 4 1322 "*int8" `945 
V L "n" 4 1323 "int8" `946 
V L "pivot" 4 1324 "int8" `947 
V L "val" 4 1325 "sint8" `948 
C L "bsearch" 4 398 1 "FUNCTION"
D G "_GPS_VERSION" 3 37 "13" "software version of this library"
D G "_GPS_MPH_PER_KNOT" 3 38 "1.15077945"
D G "_GPS_MPS_PER_KNOT" 3 39 "0.51444444"
D G "_GPS_KMPH_PER_KNOT" 3 40 "1.852"
D G "_GPS_MILES_PER_METER" 3 41 "0.00062137112"
D G "_GPS_KM_PER_METER" 3 42 "0.001"
D G "_GPS_NO_STATS" 3 43 "" "7"
E G "GPS_INVALID_AGE" 3 49 "-1" `950 
E G "GPS_INVALID_ANGLE" 3 50 "999999999" `951 
E G "GPS_INVALID_ALTITUDE" 3 50 "999999999" `952 
E G "GPS_INVALID_DATE" 3 51 "0" `953 
E G "GPS_INVALID_TIME" 3 51 "-1" `954 
E G "GPS_INVALID_SPEED" 3 52 "999999999" `955 
E G "GPS_INVALID_FIX_TIME" 3 52 "-1" `956 
E G "GPS_INVALID_SATELLITES" 3 53 "255" `957 
E G "GPS_INVALID_HDOP" 3 54 "-1" `958 
V G "" 3 54 "" "private:"
E G "_GPS_SENTENCE_GPGGA" 3 58 "0" `960 
E G "_GPS_SENTENCE_GPRMC" 3 58 "1" `961 
E G "_GPS_SENTENCE_OTHER" 3 58 "2" `962 
V G "" 3 58 "" "properties"
V G "_time" 3 61 "int32" `963 
V G "_new_time" 3 61 "int32" `964 
V G "_date" 3 62 "int32" `965 
V G "_new_date" 3 62 "int32" `966 
V G "_latitude" 3 63 "int32" `967 
V G "_new_latitude" 3 63 "int32" `968 
V G "_longitude" 3 64 "int32" `969 
V G "_new_longitude" 3 64 "int32" `970 
V G "_altitude" 3 65 "int32" `971 
V G "_new_altitude" 3 65 "int32" `972 
V G "_speed" 3 66 "int32" `973 
V G "_new_speed" 3 66 "int32" `974 
V G "_course" 3 67 "int32" `975 
V G "_new_course" 3 67 "int32" `976 
V G "_hdop" 3 68 "int32" `977 
V G "_new_hdop" 3 68 "int32" `978 
V G "_numsats" 3 69 "int16" `979 
V G "_new_numsats" 3 69 "int16" `980 
V G "_last_time_fix" 3 71 "int32" `981 
V G "_new_time_fix" 3 71 "int32" `982 
V G "_last_position_fix" 3 72 "int32" `983 
V G "_new_position_fix" 3 72 "int32" `984  "parsing state variables"
V G "_parity" 3 75 "int8" `985 
V G "_is_checksum_term" 3 76 "int1" `986 
V G "_term" 3 77 "int8[15]" `987 
V G "_sentence_type" 3 78 "int8" `988 
V G "_term_number" 3 79 "int8" `989 
V G "_term_offset" 3 80 "int8" `990 
V G "_gps_data_good" 3 81 "int1" `991 
V G "GPS_INVALID_F_ANGLE" 3 83 "float" `992 
V G "GPS_INVALID_F_ALTITUDE" 3 84 "float" `994 
V G "GPS_INVALID_F_SPEED" 3 85 "float" `996 
C L "tinyGPS_init" 3 45 8 "FUNCTION"
F N "tinyGPS_init" 3 94 ""
f G "tinyGPS_init" 3 94 "void()" `998 
F N "encode" 3 95 ""
V L "c" 3 95 "int8" `1000 
f G "encode" 3 95 "int8(int8 c)" `999  "process one character received from GPS"
C L "encode" 3 45 3 "FUNCTION"
F N "get_position" 3 100 ""
V L "latitude" 3 100 "*int32" `1002 
V L "longitude" 3 100 "*int32" `1003 
V L "fix_age" 3 100 "*int32" `1004 
f G "get_position" 3 100 "void(*int32 latitude,*int32 longitude,*int32=0 fix_age)" `1001  "date as ddmmyy, time as hhmmsscc, and age in milliseconds"
F N "get_datetime" 3 103 ""
V L "date" 3 103 "*int32" `1007 
V L "time" 3 103 "*int32" `1008 
V L "age" 3 103 "*int32" `1009 
f G "get_datetime" 3 103 "void(*int32 date,*int32 time,*int32=0 age)" `1006  "signed altitude in centimeters (from GPGGA sentence)"
F N "altitude" 3 106 ""
F G "altitude" 3 106 "int32()" `1011 
F N "course" 3 109 ""
F G "course" 3 109 "int32()" `1012 
F N "speed" 3 112 ""
F G "speed" 3 112 "int32()" `1013 
F N "satellites" 3 115 ""
F G "satellites" 3 115 "int8()" `1014 
F N "hdop" 3 118 ""
F G "hdop" 3 118 "int32()" `1015 
F N "f_get_position" 3 120 ""
V L "latitude" 3 120 "*float" `1017 
V L "longitude" 3 120 "*float" `1018 
V L "fix_age" 3 120 "*int32" `1019 
f G "f_get_position" 3 120 "void(*float latitude,*float longitude,*int32=0 fix_age)" `1016 
F N "crack_datetime" 3 121 ""
V L "year" 3 121 "*int16" `1022 
V L "month" 3 121 "*int8" `1023 
V L "day" 3 121 "*int8" `1024 
V L "hour" 3 122 "*int8" `1025 
V L "minute" 3 122 "*int8" `1026 
V L "second" 3 122 "*int8" `1027 
V L "hundredths" 3 122 "*int8" `1028 
V L "fix_age" 3 122 "*int32" `1029 
f G "crack_datetime" 3 122 "void(*int16 year,*int8 month,*int8 day,*int8 hour,*int8 minute,*int8 second,*int8=0 hundredths,*int32=0 fix_age)" `1021 
F N "f_altitude" 3 123 ""
f G "f_altitude" 3 123 "float()" `1032 
F N "f_course" 3 124 ""
f G "f_course" 3 124 "float()" `1033 
F N "f_speed_knots" 3 125 ""
f G "f_speed_knots" 3 125 "float()" `1034 
F N "f_speed_mph" 3 126 ""
f G "f_speed_mph" 3 126 "float()" `1035 
F N "f_speed_mps" 3 127 ""
f G "f_speed_mps" 3 127 "float()" `1036 
F N "f_speed_kmph" 3 128 ""
f G "f_speed_kmph" 3 128 "float()" `1037 
F N "library_version" 3 130 ""
F G "library_version" 3 130 "int16()" `1038 
F N "distance_between" 3 132 ""
V L "lat1" 3 132 "float" `1040 
V L "long1" 3 132 "float" `1041 
V L "lat2" 3 132 "float" `1042 
V L "long2" 3 132 "float" `1043 
f G "distance_between" 3 132 "float(float lat1,float long1,float lat2,float long2)" `1039 
F N "course_to" 3 133 ""
V L "lat1" 3 133 "float" `1045 
V L "long1" 3 133 "float" `1046 
V L "lat2" 3 133 "float" `1047 
V L "long2" 3 133 "float" `1048 
f G "course_to" 3 133 "float(float lat1,float long1,float lat2,float long2)" `1044 
F N "cardinal" 3 134 ""
V L "course" 3 134 "float" `1050 
f G "cardinal" 3 134 "*int8(float course)" `1049  "internal utilities"
F N "from_hex" 3 150 ""
V L "a" 3 150 "int8" `1052 
f G "from_hex" 3 150 "int16(int8 a)" `1051 
F N "parse_decimal" 3 151 ""
f G "parse_decimal" 3 151 "int32()" `1053 
F N "parse_degrees" 3 152 ""
f G "parse_degrees" 3 152 "int32()" `1054 
F N "term_complete" 3 153 ""
f G "term_complete" 3 153 "int8()" `1055 
F N "gpsisdigit" 3 154 ""
V L "c" 3 154 "int8" `1057 
F G "gpsisdigit" 3 154 "int8(int8 c)" `1056 
F N "gpsatol" 3 155 ""
V L "str" 3 155 "*int8" `1059 
f G "gpsatol" 3 155 "int32(*int8 str)" `1058 
F N "gpsstrcmp" 3 156 ""
V L "str1" 3 156 "*int8" `1061 
V L "str2" 3 156 "*int8" `1062 
f G "gpsstrcmp" 3 156 "int16(*int8 str1,*int8 str2)" `1060  "};"
C L "gpsstrcmp" 3 45 13 "FUNCTION"
V G "_GPRMC_TERM" 3 178 "int8[1]" `1063 
C L "gpsstrcmp" 3 45 1 "FUNCTION"
V G "_GPGGA_TERM" 3 180 "int8[1]" `1064 
F N "millis" 3 182 ""
F G "millis" 3 182 "int32()" `1065 
D G "COMBINE" 3 184 "(sentence_type,term_number) (((unsigned)(sentence_type) << 5) | term_number)"
F N "get_position" 3 187 ""
V L "latitude" 3 187 "*int32" `1002 
V L "longitude" 3 187 "*int32" `1003 
V L "fix_age" 3 187 "*int32" `1069 
F G "get_position" 3 188 "void(*int32 latitude,*int32 longitude,*int32=0 fix_age)" `1001 
F N "f_get_position" 3 195 ""
V L "latitude" 3 195 "*float" `1017 
V L "longitude" 3 195 "*float" `1018 
V L "fix_age" 3 195 "*int32" `1069 
F G "f_get_position" 3 196 "void(*float latitude,*float longitude,*int32=0 fix_age)" `1016 
V L "lat" 3 197 "int32" `1066 
V L "lon" 3 197 "int32" `1067 
F N "gpsstrcmp" 3 204 ""
V L "str1" 3 204 "*int8" `1061 
V L "str2" 3 204 "*int8" `1072 
F G "gpsstrcmp" 3 205 "int16(*int8 str1,*int8 str2)" `1060 
F N "from_hex" 3 211 ""
V L "a" 3 211 "int8" `1071 
F G "from_hex" 3 212 "int16(int8 a)" `1051 
C L "parse_degrees" 3 45 1 "FUNCTION"
F N "parse_degrees" 3 222 ""
F G "parse_degrees" 3 223 "int32()" `1054 
V L "p" 3 224 "*int8" `1070 
V L "left_of_decimal" 3 225 "int32" `1071 
V L "hundred1000ths_of_minute" 3 226 "int32" `1072 
V L "mult" 3 230 "int32" `1076 
F N "parse_decimal" 3 241 ""
F G "parse_decimal" 3 242 "int32()" `1053 
V L "p" 3 243 "*int8" `1077 
V L "isneg" 3 244 "int1" `1078 
V L "ret" 3 246 "int32" `1079 
F N "gpsatol" 3 260 ""
V L "str" 3 260 "*int8" `1081 
F G "gpsatol" 3 261 "int32(*int8 str)" `1058 
V L "ret" 3 263 "int32" `1080 
C L "tinyGPS_init" 3 45 1 "FUNCTION"
F N "tinyGPS_init" 3 271 ""
F G "tinyGPS_init" 3 271 "void()" `998 
F N "encode" 3 297 ""
V L "c" 3 297 "int8" `1082 
F G "encode" 3 298 "int8(int8 c)" `999 
V L "valid_sentence" 3 299 "int1" `1081 
C L "encode" 3 45 1 "FUNCTION"
C L "encode" 3 45 1 "FUNCTION"
C L "encode" 3 45 1 "FUNCTION"
C L "term_complete" 3 45 3 "FUNCTION"
F N "term_complete" 3 342 ""
F G "term_complete" 3 343 "int8()" `1055 
V L "checksum" 3 346 "int8" `1082 
C L "term_complete" 3 45 1 "FUNCTION"
C L "term_complete" 3 45 1 "FUNCTION"
C L "term_complete" 3 45 1 "FUNCTION"
C L "term_complete" 3 45 1 "FUNCTION"
C L "term_complete" 3 45 1 "FUNCTION"
C L "term_complete" 3 45 1 "FUNCTION"
C L "term_complete" 3 45 1 "FUNCTION"
C L "term_complete" 3 45 1 "FUNCTION"
C L "term_complete" 3 45 1 "FUNCTION"
C L "term_complete" 3 45 1 "FUNCTION"
C L "term_complete" 3 45 1 "FUNCTION"
C L "term_complete" 3 45 1 "FUNCTION"
C L "term_complete" 3 45 1 "FUNCTION"
C L "term_complete" 3 45 1 "FUNCTION"
V G "C__" 0 4 "int8" `1084 
V G "newData" 0 5 "int1" `1085 
V G "flat" 0 6 "float" `1086 
V G "flon" 0 6 "float" `1087 
V G "age" 0 7 "int32" `1088 
V G "buff" 0 8 "int8[300]" `1089 
V G "index" 0 9 "int8" `1090 
C L "decodeString" 0 10 25 "FUNCTION"
F N "decodeString" 0 44 ""
F G "decodeString" 0 45 "void()" `1091 
V L "i" 0 49 "int8" `1096 
C L "decodeString" 0 10 2 "FUNCTION"
V L "flat" 0 54 "float" `1097 
V L "flon" 0 54 "float" `1098 
V L "age" 0 55 "int32" `1099 
V L "sats" 0 56 "int8" `1100 
V L "hdop__" 0 57 "int32" `1101 
F N "MAIN" 0 69 ""
F G "MAIN" 0 70 "void()" `1121  "enable_interrupts (INT_RDA) ;"
C L "MAIN" 0 10 1 "FUNCTION"
V L "n" 0 88 "int16" `1126 
C L "MAIN" 0 10 1 "FUNCTION"
C L "MAIN" 0 10 1 "FUNCTION"
V L "n" 0 100 "int16" `1127 
V L "sats" 0 106 "int8" `1128 
V L "hdop__" 0 107 "int32" `1129 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "port_e_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
